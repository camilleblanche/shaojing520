<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.camille.shaojing.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.camille.shaojing.model.User">
    <id column="USER_ID" jdbcType="BIGINT" property="userId" />
    <result column="ACCOUNT" jdbcType="VARCHAR" property="account" />
    <result column="PASSWORD" jdbcType="VARCHAR" property="password" />
    <result column="NICK_NAME" jdbcType="VARCHAR" property="nickName" />
    <result column="REAL_NAME" jdbcType="VARCHAR" property="realName" />
    <result column="MOBILE" jdbcType="BIGINT" property="mobile" />
    <result column="GENDER" jdbcType="VARCHAR" property="gender" />
    <result column="AGE" jdbcType="INTEGER" property="age" />
    <result column="EMAIL" jdbcType="VARCHAR" property="email" />
    <result column="ADDRESS" jdbcType="VARCHAR" property="address" />
    <result column="BIRTHDAY" jdbcType="VARCHAR" property="birthday" />
    <result column="STATE" jdbcType="VARCHAR" property="state" />
    <result column="LASTLOGIN_TIME" jdbcType="TIMESTAMP" property="lastloginTime" />
    <result column="CREATE_TIME" jdbcType="TIMESTAMP" property="createTime" />
    <result column="UPDATE_TIME" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    USER_ID, ACCOUNT, PASSWORD, NICK_NAME, REAL_NAME, MOBILE, GENDER, AGE, EMAIL, ADDRESS, 
    BIRTHDAY, STATE, LASTLOGIN_TIME, CREATE_TIME, UPDATE_TIME
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where USER_ID = #{userId,jdbcType=BIGINT}
  </select>
  <!-- 通过账号查询用户 -->
  <select id="getUserByAccount" parameterType="string" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sys_user
    where
    	STATE!="99"
    AND ACCOUNT = #{account}
  </select>
  <!-- 通过userId查询角色信息 -->
  <select id="getRoleSetByUserId" parameterType="long" resultType="string">
    SELECT
		ROLE_NAME
	FROM
		sys_user su,
		sys_user_role sur,
		sys_role sr
	WHERE
		su.USER_ID = #{userId}
	AND su.USER_ID = sur.USER_ID
	AND sur.ROLE_ID = sr.ROLE_ID
  </select>
  <!-- 通过userId查询权限信息-->
  <select id="getPermissionSetByUserId" parameterType="long" resultType="string">
    SELECT
		sm.PERMISSION
	FROM
		sys_user su,
		sys_user_role sur,
		sys_role sr,
		sys_role_menu srm,
		sys_menu sm
	WHERE
		su.USER_ID = #{userId}
	AND sm.STATE = '01'
	AND su.USER_ID = sur.USER_ID
	AND sur.ROLE_ID = sr.ROLE_ID
	AND sr.ROLE_ID = srm.ROLE_ID
	AND srm.MENU_ID = sm.MENU_ID
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from sys_user
    where USER_ID = #{userId,jdbcType=BIGINT}
  </delete>
  <delete id="deleteBatch">
	delete from sys_user 
	where USER_ID in 
	<foreach item="userId" collection="array" open="(" separator="," close=")">
		#{userId}
	</foreach>
  </delete>
  <insert id="insert" parameterType="com.camille.shaojing.model.User">
    insert into sys_user (USER_ID, ACCOUNT, PASSWORD, 
      NICK_NAME, REAL_NAME, MOBILE, 
      GENDER, AGE, EMAIL, 
      ADDRESS, BIRTHDAY, STATE, 
      LASTLOGIN_TIME, CREATE_TIME, UPDATE_TIME
      )
    values (#{userId,jdbcType=BIGINT}, #{account,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{nickName,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{mobile,jdbcType=BIGINT}, 
      #{gender,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER}, #{email,jdbcType=VARCHAR}, 
      #{address,jdbcType=VARCHAR}, #{birthday,jdbcType=VARCHAR}, #{state,jdbcType=VARCHAR}, 
      #{lastloginTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="userId" parameterType="com.camille.shaojing.model.User">
    insert into sys_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        USER_ID,
      </if>
      <if test="account != null">
        ACCOUNT,
      </if>
      <if test="password != null">
        PASSWORD,
      </if>
      <if test="nickName != null">
        NICK_NAME,
      </if>
      <if test="realName != null">
        REAL_NAME,
      </if>
      <if test="mobile != null">
        MOBILE,
      </if>
      <if test="gender != null">
        GENDER,
      </if>
      <if test="age != null">
        AGE,
      </if>
      <if test="email != null">
        EMAIL,
      </if>
      <if test="address != null">
        ADDRESS,
      </if>
      <if test="birthday != null">
        BIRTHDAY,
      </if>
      <if test="state != null">
        STATE,
      </if>
      <if test="lastloginTime != null">
        LASTLOGIN_TIME,
      </if>
        CREATE_TIME,
        UPDATE_TIME,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="account != null">
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        #{mobile,jdbcType=BIGINT},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=VARCHAR},
      </if>
      <if test="lastloginTime != null">
        #{lastloginTime,jdbcType=TIMESTAMP},
      </if>
      	NOW(),
     	NOW(),
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.camille.shaojing.model.User">
    update sys_user
    <set>
      <if test="account != null">
        ACCOUNT = #{account,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      <if test="nickName != null">
        NICK_NAME = #{nickName,jdbcType=VARCHAR},
      </if>
      <if test="realName != null">
        REAL_NAME = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="mobile != null">
        MOBILE = #{mobile,jdbcType=BIGINT},
      </if>
      <if test="gender != null">
        GENDER = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        AGE = #{age,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="address != null">
        ADDRESS = #{address,jdbcType=VARCHAR},
      </if>
      <if test="birthday != null">
        BIRTHDAY = #{birthday,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        STATE = #{state,jdbcType=VARCHAR},
      </if>
      <if test="lastloginTime != null">
        LASTLOGIN_TIME = #{lastloginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      </if>
        UPDATE_TIME = NOW(),
    </set>
    where USER_ID = #{userId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.camille.shaojing.model.User">
    update sys_user
    set ACCOUNT = #{account,jdbcType=VARCHAR},
      PASSWORD = #{password,jdbcType=VARCHAR},
      NICK_NAME = #{nickName,jdbcType=VARCHAR},
      REAL_NAME = #{realName,jdbcType=VARCHAR},
      MOBILE = #{mobile,jdbcType=BIGINT},
      GENDER = #{gender,jdbcType=VARCHAR},
      AGE = #{age,jdbcType=INTEGER},
      EMAIL = #{email,jdbcType=VARCHAR},
      ADDRESS = #{address,jdbcType=VARCHAR},
      BIRTHDAY = #{birthday,jdbcType=VARCHAR},
      STATE = #{state,jdbcType=VARCHAR},
      LASTLOGIN_TIME = #{lastloginTime,jdbcType=TIMESTAMP},
      CREATE_TIME = #{createTime,jdbcType=TIMESTAMP},
      UPDATE_TIME = #{updateTime,jdbcType=TIMESTAMP}
    where USER_ID = #{userId,jdbcType=BIGINT}
  </update>
</mapper>