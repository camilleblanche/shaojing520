<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:annotation-config></context:annotation-config>
	<context:component-scan base-package="com.camille.shaojing">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="/WEB-INF/config/property/jdbc.properties"/>
		<property name="ignoreUnresolvablePlaceholders" value="true" />
	</bean>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName" value="${driver}" />
        <property name="url" value="${url}" />
        <property name="username" value="${username}" />  
        <property name="password" value="${password}" />  
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${initialSize}"></property>  
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${maxActive}"></property>  
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${maxIdle}"></property>  
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${minIdle}"></property>  
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${maxWait}"></property>  
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	
	<!-- spring和 MyBatis整合，不需要mybatis的配置映射文件 --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <property name="dataSource" ref="dataSource" ></property>  
        <!-- 自动扫描 mapping.xml文件 -->  
        <property name="mapperLocations" value="classpath:com/camille/shaojing/sqlmapper/*Mapper.xml"></property>
        <property name="configLocation" value="/WEB-INF/config/mybatis/configuration.xml"></property>
    </bean> 
    
	<!-- mapper接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.camille.shaojing.mapper" />  
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>
	
    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->  
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="dataSource" />  
    </bean>
  	
  	<!-- 事务日志 -->
  	<bean id="logAspect" class="com.camille.shaojing.aop.LogAspect"></bean>
  	
  	<!-- 事务管理规则 -->
	<tx:advice id="myAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="modify*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/> 
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<!-- 管理区域 -->
		<aop:pointcut expression="execution(public * com.camille.shaojing.service.impl.*.*(..))" id="myCut"/>
		<!-- 通过myAdvice来管理myCut -->
		<aop:advisor advice-ref="myAdvice" pointcut-ref="myCut"/>
		
		<aop:aspect id="logAop" ref="logAspect">
			<aop:before method="before" pointcut-ref="myCut"/>
			<aop:after method="after" pointcut-ref="myCut"/>
			<!--returning的"value"名字必须和logAspect中26行定义的一样-->
			<aop:after-returning method="afterReturn" returning="value" pointcut-ref="myCut"/>
		</aop:aspect>
		
	</aop:config>
	
	<!-- quartz的Job注入spring对象 -->
	<bean id="jobFactory" class="com.camille.shaojing.quartz.JobFactory"></bean>
	<!-- quartz持久化到数据库 -->
	<bean name="quartzScheduler" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" >
        <property name="dataSource" ref ="dataSource" />       
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>
        <property name="jobFactory" ref="jobFactory"></property>
        <property name="configLocation" value="/WEB-INF/config/property/quartz.properties"/>           
    </bean>
	<import resource="spring-shiro.xml"/>
	<import resource="spring-redis.xml"/>
	<import resource="spring-task.xml"/>
	
</beans>
